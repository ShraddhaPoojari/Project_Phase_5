{"ast":null,"code":"import _defineProperty from \"C:\\\\javafsd\\\\EventFinder\\\\EventFinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\javafsd\\\\EventFinder\\\\EventFinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\javafsd\\\\EventFinder\\\\EventFinder\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\javafsd\\\\EventFinder\\\\EventFinder\\\\src\\\\forms\\\\EditUserForm.js\";\n\nimport React, { useState, useEffect } from 'react';\n\nvar EditUserForm = function EditUserForm(props) {\n  var _useState = useState(props.currentUser),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  useEffect(function () {\n    setUser(props.currentUser);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  var handleInputChange = function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setUser(_objectSpread(_objectSpread({}, user), {}, _defineProperty({}, name, value)));\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      props.updateUser(user.id, user);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Event Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: user.name,\n    onChange: handleInputChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"Event date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    name: \"username\",\n    value: user.username,\n    onChange: handleInputChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Update Event\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return props.setEditing(false);\n    },\n    className: \"button muted-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"Cancel\"));\n};\n\nexport default EditUserForm;","map":{"version":3,"names":["React","useState","useEffect","EditUserForm","props","currentUser","user","setUser","handleInputChange","event","target","name","value","preventDefault","updateUser","id","username","setEditing"],"sources":["C:/javafsd/EventFinder/EventFinder/src/forms/EditUserForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst EditUserForm = props => {\r\n  const [ user, setUser ] = useState(props.currentUser)\r\n\r\n  useEffect(\r\n    () => {\r\n      setUser(props.currentUser)\r\n    },\r\n    [ props ]\r\n  )\r\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setUser({ ...user, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n\r\n        props.updateUser(user.id, user)\r\n      }}\r\n    >\r\n      <label>Event Name</label>\r\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\r\n      <label>Event date</label>\r\n      <input type=\"date\" name=\"username\" value={user.username} onChange={handleInputChange} />\r\n      <button>Update Event</button>\r\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditUserForm\r\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;EAC5B,gBAA0BH,QAAQ,CAACG,KAAK,CAACC,WAAP,CAAlC;EAAA;EAAA,IAAQC,IAAR;EAAA,IAAcC,OAAd;;EAEAL,SAAS,CACP,YAAM;IACJK,OAAO,CAACH,KAAK,CAACC,WAAP,CAAP;EACD,CAHM,EAIP,CAAED,KAAF,CAJO,CAAT,CAH4B,CAS5B;;EAEA,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;IACjC,oBAAwBA,KAAK,CAACC,MAA9B;IAAA,IAAQC,IAAR,iBAAQA,IAAR;IAAA,IAAcC,KAAd,iBAAcA,KAAd;IAEAL,OAAO,iCAAMD,IAAN,2BAAaK,IAAb,EAAoBC,KAApB,GAAP;EACD,CAJD;;EAMA,oBACE;IACE,QAAQ,EAAE,kBAAAH,KAAK,EAAI;MACjBA,KAAK,CAACI,cAAN;MAEAT,KAAK,CAACU,UAAN,CAAiBR,IAAI,CAACS,EAAtB,EAA0BT,IAA1B;IACD,CALH;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAOE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAPF,eAQE;IAAO,IAAI,EAAC,MAAZ;IAAmB,IAAI,EAAC,MAAxB;IAA+B,KAAK,EAAEA,IAAI,CAACK,IAA3C;IAAiD,QAAQ,EAAEH,iBAA3D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EARF,eASE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBATF,eAUE;IAAO,IAAI,EAAC,MAAZ;IAAmB,IAAI,EAAC,UAAxB;IAAmC,KAAK,EAAEF,IAAI,CAACU,QAA/C;IAAyD,QAAQ,EAAER,iBAAnE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAVF,eAWE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kBAXF,eAYE;IAAQ,OAAO,EAAE;MAAA,OAAMJ,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAN;IAAA,CAAjB;IAAgD,SAAS,EAAC,qBAA1D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,YAZF,CADF;AAkBD,CAnCD;;AAqCA,eAAed,YAAf"},"metadata":{},"sourceType":"module"}